# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
import re
from api import util

import re  # noqa: E501

class Trend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, trend_group_id=None, trend_def_id=None, time_exponent=None, format=None, unit=None, color=None, symbol=None, raw_min=None, raw_max=None, scaled_min=None, scaled_max=None):  # noqa: E501
        """Trend - a model defined in OpenAPI

        :param id: The id of this Trend.  # noqa: E501
        :type id: int
        :param name: The name of this Trend.  # noqa: E501
        :type name: str
        :param trend_group_id: The trend_group_id of this Trend.  # noqa: E501
        :type trend_group_id: int
        :param trend_def_id: The trend_def_id of this Trend.  # noqa: E501
        :type trend_def_id: str
        :param time_exponent: The time_exponent of this Trend.  # noqa: E501
        :type time_exponent: int
        :param format: The format of this Trend.  # noqa: E501
        :type format: str
        :param unit: The unit of this Trend.  # noqa: E501
        :type unit: str
        :param color: The color of this Trend.  # noqa: E501
        :type color: str
        :param symbol: The symbol of this Trend.  # noqa: E501
        :type symbol: str
        :param raw_min: The raw_min of this Trend.  # noqa: E501
        :type raw_min: int
        :param raw_max: The raw_max of this Trend.  # noqa: E501
        :type raw_max: int
        :param scaled_min: The scaled_min of this Trend.  # noqa: E501
        :type scaled_min: float
        :param scaled_max: The scaled_max of this Trend.  # noqa: E501
        :type scaled_max: float
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'trend_group_id': int,
            'trend_def_id': str,
            'time_exponent': int,
            'format': str,
            'unit': str,
            'color': str,
            'symbol': str,
            'raw_min': int,
            'raw_max': int,
            'scaled_min': float,
            'scaled_max': float
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'trend_group_id': 'TrendGroupID',
            'trend_def_id': 'TrendDefID',
            'time_exponent': 'TimeExponent',
            'format': 'Format',
            'unit': 'Unit',
            'color': 'Color',
            'symbol': 'Symbol',
            'raw_min': 'RawMin',
            'raw_max': 'RawMax',
            'scaled_min': 'ScaledMin',
            'scaled_max': 'ScaledMax'
        }

        self._id = id
        self._name = name
        self._trend_group_id = trend_group_id
        self._trend_def_id = trend_def_id
        self._time_exponent = time_exponent
        self._format = format
        self._unit = unit
        self._color = color
        self._symbol = symbol
        self._raw_min = raw_min
        self._raw_max = raw_max
        self._scaled_min = scaled_min
        self._scaled_max = scaled_max

    @classmethod
    def from_dict(cls, dikt) -> 'Trend':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Trend of this Trend.  # noqa: E501
        :rtype: Trend
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Trend.

        none  # noqa: E501

        :return: The id of this Trend.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trend.

        none  # noqa: E501

        :param id: The id of this Trend.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Trend.

        none  # noqa: E501

        :return: The name of this Trend.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Trend.

        none  # noqa: E501

        :param name: The name of this Trend.
        :type name: str
        """
        if name is not None and not re.search(r'^.{0,30}', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^.{0,30}/`")  # noqa: E501

        self._name = name

    @property
    def trend_group_id(self):
        """Gets the trend_group_id of this Trend.

        none  # noqa: E501

        :return: The trend_group_id of this Trend.
        :rtype: int
        """
        return self._trend_group_id

    @trend_group_id.setter
    def trend_group_id(self, trend_group_id):
        """Sets the trend_group_id of this Trend.

        none  # noqa: E501

        :param trend_group_id: The trend_group_id of this Trend.
        :type trend_group_id: int
        """

        self._trend_group_id = trend_group_id

    @property
    def trend_def_id(self):
        """Gets the trend_def_id of this Trend.

        none  # noqa: E501

        :return: The trend_def_id of this Trend.
        :rtype: str
        """
        return self._trend_def_id

    @trend_def_id.setter
    def trend_def_id(self, trend_def_id):
        """Sets the trend_def_id of this Trend.

        none  # noqa: E501

        :param trend_def_id: The trend_def_id of this Trend.
        :type trend_def_id: str
        """
        if trend_def_id is None:
            raise ValueError("Invalid value for `trend_def_id`, must not be `None`")  # noqa: E501

        self._trend_def_id = trend_def_id

    @property
    def time_exponent(self):
        """Gets the time_exponent of this Trend.

        none  # noqa: E501

        :return: The time_exponent of this Trend.
        :rtype: int
        """
        return self._time_exponent

    @time_exponent.setter
    def time_exponent(self, time_exponent):
        """Sets the time_exponent of this Trend.

        none  # noqa: E501

        :param time_exponent: The time_exponent of this Trend.
        :type time_exponent: int
        """

        self._time_exponent = time_exponent

    @property
    def format(self):
        """Gets the format of this Trend.

        none  # noqa: E501

        :return: The format of this Trend.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Trend.

        none  # noqa: E501

        :param format: The format of this Trend.
        :type format: str
        """

        self._format = format

    @property
    def unit(self):
        """Gets the unit of this Trend.

        none  # noqa: E501

        :return: The unit of this Trend.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Trend.

        none  # noqa: E501

        :param unit: The unit of this Trend.
        :type unit: str
        """

        self._unit = unit

    @property
    def color(self):
        """Gets the color of this Trend.


        :return: The color of this Trend.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Trend.


        :param color: The color of this Trend.
        :type color: str
        """

        self._color = color

    @property
    def symbol(self):
        """Gets the symbol of this Trend.


        :return: The symbol of this Trend.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Trend.


        :param symbol: The symbol of this Trend.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def raw_min(self):
        """Gets the raw_min of this Trend.


        :return: The raw_min of this Trend.
        :rtype: int
        """
        return self._raw_min

    @raw_min.setter
    def raw_min(self, raw_min):
        """Sets the raw_min of this Trend.


        :param raw_min: The raw_min of this Trend.
        :type raw_min: int
        """
        if raw_min is None:
            raise ValueError("Invalid value for `raw_min`, must not be `None`")  # noqa: E501

        self._raw_min = raw_min

    @property
    def raw_max(self):
        """Gets the raw_max of this Trend.


        :return: The raw_max of this Trend.
        :rtype: int
        """
        return self._raw_max

    @raw_max.setter
    def raw_max(self, raw_max):
        """Sets the raw_max of this Trend.


        :param raw_max: The raw_max of this Trend.
        :type raw_max: int
        """
        if raw_max is None:
            raise ValueError("Invalid value for `raw_max`, must not be `None`")  # noqa: E501

        self._raw_max = raw_max

    @property
    def scaled_min(self):
        """Gets the scaled_min of this Trend.


        :return: The scaled_min of this Trend.
        :rtype: float
        """
        return self._scaled_min

    @scaled_min.setter
    def scaled_min(self, scaled_min):
        """Sets the scaled_min of this Trend.


        :param scaled_min: The scaled_min of this Trend.
        :type scaled_min: float
        """
        if scaled_min is None:
            raise ValueError("Invalid value for `scaled_min`, must not be `None`")  # noqa: E501

        self._scaled_min = scaled_min

    @property
    def scaled_max(self):
        """Gets the scaled_max of this Trend.


        :return: The scaled_max of this Trend.
        :rtype: float
        """
        return self._scaled_max

    @scaled_max.setter
    def scaled_max(self, scaled_max):
        """Sets the scaled_max of this Trend.


        :param scaled_max: The scaled_max of this Trend.
        :type scaled_max: float
        """
        if scaled_max is None:
            raise ValueError("Invalid value for `scaled_max`, must not be `None`")  # noqa: E501

        self._scaled_max = scaled_max
