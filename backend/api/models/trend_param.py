# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
import re
from api import util

import re  # noqa: E501

class TrendParam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trend_id=None, trend_param_def_id=None, name=None, data_type=None, value=None):  # noqa: E501
        """TrendParam - a model defined in OpenAPI

        :param trend_id: The trend_id of this TrendParam.  # noqa: E501
        :type trend_id: int
        :param trend_param_def_id: The trend_param_def_id of this TrendParam.  # noqa: E501
        :type trend_param_def_id: str
        :param name: The name of this TrendParam.  # noqa: E501
        :type name: str
        :param data_type: The data_type of this TrendParam.  # noqa: E501
        :type data_type: str
        :param value: The value of this TrendParam.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'trend_id': int,
            'trend_param_def_id': str,
            'name': str,
            'data_type': str,
            'value': str
        }

        self.attribute_map = {
            'trend_id': 'TrendID',
            'trend_param_def_id': 'TrendParamDefID',
            'name': 'Name',
            'data_type': 'DataType',
            'value': 'Value'
        }

        self._trend_id = trend_id
        self._trend_param_def_id = trend_param_def_id
        self._name = name
        self._data_type = data_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'TrendParam':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrendParam of this TrendParam.  # noqa: E501
        :rtype: TrendParam
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trend_id(self):
        """Gets the trend_id of this TrendParam.

        none  # noqa: E501

        :return: The trend_id of this TrendParam.
        :rtype: int
        """
        return self._trend_id

    @trend_id.setter
    def trend_id(self, trend_id):
        """Sets the trend_id of this TrendParam.

        none  # noqa: E501

        :param trend_id: The trend_id of this TrendParam.
        :type trend_id: int
        """
        if trend_id is None:
            raise ValueError("Invalid value for `trend_id`, must not be `None`")  # noqa: E501

        self._trend_id = trend_id

    @property
    def trend_param_def_id(self):
        """Gets the trend_param_def_id of this TrendParam.


        :return: The trend_param_def_id of this TrendParam.
        :rtype: str
        """
        return self._trend_param_def_id

    @trend_param_def_id.setter
    def trend_param_def_id(self, trend_param_def_id):
        """Sets the trend_param_def_id of this TrendParam.


        :param trend_param_def_id: The trend_param_def_id of this TrendParam.
        :type trend_param_def_id: str
        """
        if trend_param_def_id is None:
            raise ValueError("Invalid value for `trend_param_def_id`, must not be `None`")  # noqa: E501

        self._trend_param_def_id = trend_param_def_id

    @property
    def name(self):
        """Gets the name of this TrendParam.


        :return: The name of this TrendParam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrendParam.


        :param name: The name of this TrendParam.
        :type name: str
        """
        if name is not None and not re.search(r'^.{0,30}', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^.{0,30}/`")  # noqa: E501

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this TrendParam.


        :return: The data_type of this TrendParam.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TrendParam.


        :param data_type: The data_type of this TrendParam.
        :type data_type: str
        """
        if data_type is not None and not re.search(r'^.{0,6}', data_type):  # noqa: E501
            raise ValueError("Invalid value for `data_type`, must be a follow pattern or equal to `/^.{0,6}/`")  # noqa: E501

        self._data_type = data_type

    @property
    def value(self):
        """Gets the value of this TrendParam.


        :return: The value of this TrendParam.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TrendParam.


        :param value: The value of this TrendParam.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and not re.search(r'^.{0,30}', value):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a follow pattern or equal to `/^.{0,30}/`")  # noqa: E501

        self._value = value
