# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class Unauthorized(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error=None, status=None, timestamp=None, path=None, message=None, trace_id=None):  # noqa: E501
        """Unauthorized - a model defined in OpenAPI

        :param error: The error of this Unauthorized.  # noqa: E501
        :type error: str
        :param status: The status of this Unauthorized.  # noqa: E501
        :type status: int
        :param timestamp: The timestamp of this Unauthorized.  # noqa: E501
        :type timestamp: str
        :param path: The path of this Unauthorized.  # noqa: E501
        :type path: str
        :param message: The message of this Unauthorized.  # noqa: E501
        :type message: str
        :param trace_id: The trace_id of this Unauthorized.  # noqa: E501
        :type trace_id: str
        """
        self.openapi_types = {
            'error': str,
            'status': int,
            'timestamp': str,
            'path': str,
            'message': str,
            'trace_id': str
        }

        self.attribute_map = {
            'error': 'error',
            'status': 'status',
            'timestamp': 'timestamp',
            'path': 'path',
            'message': 'message',
            'trace_id': 'traceId'
        }

        self._error = error
        self._status = status
        self._timestamp = timestamp
        self._path = path
        self._message = message
        self._trace_id = trace_id

    @classmethod
    def from_dict(cls, dikt) -> 'Unauthorized':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Unauthorized of this Unauthorized.  # noqa: E501
        :rtype: Unauthorized
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this Unauthorized.


        :return: The error of this Unauthorized.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Unauthorized.


        :param error: The error of this Unauthorized.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def status(self):
        """Gets the status of this Unauthorized.


        :return: The status of this Unauthorized.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Unauthorized.


        :param status: The status of this Unauthorized.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this Unauthorized.


        :return: The timestamp of this Unauthorized.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Unauthorized.


        :param timestamp: The timestamp of this Unauthorized.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def path(self):
        """Gets the path of this Unauthorized.


        :return: The path of this Unauthorized.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Unauthorized.


        :param path: The path of this Unauthorized.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def message(self):
        """Gets the message of this Unauthorized.


        :return: The message of this Unauthorized.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Unauthorized.


        :param message: The message of this Unauthorized.
        :type message: str
        """

        self._message = message

    @property
    def trace_id(self):
        """Gets the trace_id of this Unauthorized.


        :return: The trace_id of this Unauthorized.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this Unauthorized.


        :param trace_id: The trace_id of this Unauthorized.
        :type trace_id: str
        """

        self._trace_id = trace_id
