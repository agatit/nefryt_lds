# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api.models.editor_pipeline import EditorPipeline
import re
from api import util

from api.models.editor_pipeline import EditorPipeline  # noqa: E501
import re  # noqa: E501

class Pipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, begin_pos=None, editor_params=None):  # noqa: E501
        """Pipeline - a model defined in OpenAPI

        :param id: The id of this Pipeline.  # noqa: E501
        :type id: int
        :param name: The name of this Pipeline.  # noqa: E501
        :type name: str
        :param begin_pos: The begin_pos of this Pipeline.  # noqa: E501
        :type begin_pos: float
        :param editor_params: The editor_params of this Pipeline.  # noqa: E501
        :type editor_params: EditorPipeline
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'begin_pos': float,
            'editor_params': EditorPipeline
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'begin_pos': 'BeginPos',
            'editor_params': 'EditorParams'
        }

        self._id = id
        self._name = name
        self._begin_pos = begin_pos
        self._editor_params = editor_params

    @classmethod
    def from_dict(cls, dikt) -> 'Pipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pipeline of this Pipeline.  # noqa: E501
        :rtype: Pipeline
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Pipeline.

        none  # noqa: E501

        :return: The id of this Pipeline.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.

        none  # noqa: E501

        :param id: The id of this Pipeline.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Pipeline.

        none  # noqa: E501

        :return: The name of this Pipeline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.

        none  # noqa: E501

        :param name: The name of this Pipeline.
        :type name: str
        """
        if name is not None and not re.search(r'^.{0,30}', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^.{0,30}/`")  # noqa: E501

        self._name = name

    @property
    def begin_pos(self):
        """Gets the begin_pos of this Pipeline.

        none  # noqa: E501

        :return: The begin_pos of this Pipeline.
        :rtype: float
        """
        return self._begin_pos

    @begin_pos.setter
    def begin_pos(self, begin_pos):
        """Sets the begin_pos of this Pipeline.

        none  # noqa: E501

        :param begin_pos: The begin_pos of this Pipeline.
        :type begin_pos: float
        """

        self._begin_pos = begin_pos

    @property
    def editor_params(self):
        """Gets the editor_params of this Pipeline.


        :return: The editor_params of this Pipeline.
        :rtype: EditorPipeline
        """
        return self._editor_params

    @editor_params.setter
    def editor_params(self, editor_params):
        """Sets the editor_params of this Pipeline.


        :param editor_params: The editor_params of this Pipeline.
        :type editor_params: EditorPipeline
        """

        self._editor_params = editor_params
