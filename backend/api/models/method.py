# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
import re
from api import util

import re  # noqa: E501

class Method(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, method_def_id=None, pipeline_id=None, name=None):  # noqa: E501
        """Method - a model defined in OpenAPI

        :param id: The id of this Method.  # noqa: E501
        :type id: int
        :param method_def_id: The method_def_id of this Method.  # noqa: E501
        :type method_def_id: int
        :param pipeline_id: The pipeline_id of this Method.  # noqa: E501
        :type pipeline_id: int
        :param name: The name of this Method.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'id': int,
            'method_def_id': int,
            'pipeline_id': int,
            'name': str
        }

        self.attribute_map = {
            'id': 'ID',
            'method_def_id': 'MethodDefID',
            'pipeline_id': 'PipelineID',
            'name': 'Name'
        }

        self._id = id
        self._method_def_id = method_def_id
        self._pipeline_id = pipeline_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Method':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Method of this Method.  # noqa: E501
        :rtype: Method
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Method.

        none  # noqa: E501

        :return: The id of this Method.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Method.

        none  # noqa: E501

        :param id: The id of this Method.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def method_def_id(self):
        """Gets the method_def_id of this Method.


        :return: The method_def_id of this Method.
        :rtype: int
        """
        return self._method_def_id

    @method_def_id.setter
    def method_def_id(self, method_def_id):
        """Sets the method_def_id of this Method.


        :param method_def_id: The method_def_id of this Method.
        :type method_def_id: int
        """
        if method_def_id is None:
            raise ValueError("Invalid value for `method_def_id`, must not be `None`")  # noqa: E501

        self._method_def_id = method_def_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this Method.


        :return: The pipeline_id of this Method.
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this Method.


        :param pipeline_id: The pipeline_id of this Method.
        :type pipeline_id: int
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def name(self):
        """Gets the name of this Method.


        :return: The name of this Method.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Method.


        :param name: The name of this Method.
        :type name: str
        """
        if name is not None and not re.search(r'^.{0,30}', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^.{0,30}/`")  # noqa: E501

        self._name = name
