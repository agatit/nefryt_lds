# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, event_def_id=None, method_id=None, begin_date=None, ack_date=None, end_date=None, details=None, position=None, caption=None, verbosity=None, silient=None):  # noqa: E501
        """Event - a model defined in OpenAPI

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param event_def_id: The event_def_id of this Event.  # noqa: E501
        :type event_def_id: int
        :param method_id: The method_id of this Event.  # noqa: E501
        :type method_id: int
        :param begin_date: The begin_date of this Event.  # noqa: E501
        :type begin_date: datetime
        :param ack_date: The ack_date of this Event.  # noqa: E501
        :type ack_date: datetime
        :param end_date: The end_date of this Event.  # noqa: E501
        :type end_date: datetime
        :param details: The details of this Event.  # noqa: E501
        :type details: str
        :param position: The position of this Event.  # noqa: E501
        :type position: int
        :param caption: The caption of this Event.  # noqa: E501
        :type caption: str
        :param verbosity: The verbosity of this Event.  # noqa: E501
        :type verbosity: str
        :param silient: The silient of this Event.  # noqa: E501
        :type silient: bool
        """
        self.openapi_types = {
            'id': int,
            'event_def_id': int,
            'method_id': int,
            'begin_date': datetime,
            'ack_date': datetime,
            'end_date': datetime,
            'details': str,
            'position': int,
            'caption': str,
            'verbosity': str,
            'silient': bool
        }

        self.attribute_map = {
            'id': 'ID',
            'event_def_id': 'EventDefID',
            'method_id': 'MethodID',
            'begin_date': 'BeginDate',
            'ack_date': 'AckDate',
            'end_date': 'EndDate',
            'details': 'Details',
            'position': 'Position',
            'caption': 'Caption',
            'verbosity': 'Verbosity',
            'silient': 'Silient'
        }

        self._id = id
        self._event_def_id = event_def_id
        self._method_id = method_id
        self._begin_date = begin_date
        self._ack_date = ack_date
        self._end_date = end_date
        self._details = details
        self._position = position
        self._caption = caption
        self._verbosity = verbosity
        self._silient = silient

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Event.

        none  # noqa: E501

        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        none  # noqa: E501

        :param id: The id of this Event.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def event_def_id(self):
        """Gets the event_def_id of this Event.

        none  # noqa: E501

        :return: The event_def_id of this Event.
        :rtype: int
        """
        return self._event_def_id

    @event_def_id.setter
    def event_def_id(self, event_def_id):
        """Sets the event_def_id of this Event.

        none  # noqa: E501

        :param event_def_id: The event_def_id of this Event.
        :type event_def_id: int
        """
        if event_def_id is None:
            raise ValueError("Invalid value for `event_def_id`, must not be `None`")  # noqa: E501

        self._event_def_id = event_def_id

    @property
    def method_id(self):
        """Gets the method_id of this Event.

        none  # noqa: E501

        :return: The method_id of this Event.
        :rtype: int
        """
        return self._method_id

    @method_id.setter
    def method_id(self, method_id):
        """Sets the method_id of this Event.

        none  # noqa: E501

        :param method_id: The method_id of this Event.
        :type method_id: int
        """
        if method_id is None:
            raise ValueError("Invalid value for `method_id`, must not be `None`")  # noqa: E501

        self._method_id = method_id

    @property
    def begin_date(self):
        """Gets the begin_date of this Event.

        none  # noqa: E501

        :return: The begin_date of this Event.
        :rtype: datetime
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this Event.

        none  # noqa: E501

        :param begin_date: The begin_date of this Event.
        :type begin_date: datetime
        """
        if begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")  # noqa: E501

        self._begin_date = begin_date

    @property
    def ack_date(self):
        """Gets the ack_date of this Event.

        none  # noqa: E501

        :return: The ack_date of this Event.
        :rtype: datetime
        """
        return self._ack_date

    @ack_date.setter
    def ack_date(self, ack_date):
        """Sets the ack_date of this Event.

        none  # noqa: E501

        :param ack_date: The ack_date of this Event.
        :type ack_date: datetime
        """

        self._ack_date = ack_date

    @property
    def end_date(self):
        """Gets the end_date of this Event.

        none  # noqa: E501

        :return: The end_date of this Event.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Event.

        none  # noqa: E501

        :param end_date: The end_date of this Event.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def details(self):
        """Gets the details of this Event.

        none  # noqa: E501

        :return: The details of this Event.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Event.

        none  # noqa: E501

        :param details: The details of this Event.
        :type details: str
        """

        self._details = details

    @property
    def position(self):
        """Gets the position of this Event.

        none  # noqa: E501

        :return: The position of this Event.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Event.

        none  # noqa: E501

        :param position: The position of this Event.
        :type position: int
        """

        self._position = position

    @property
    def caption(self):
        """Gets the caption of this Event.

        none  # noqa: E501

        :return: The caption of this Event.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this Event.

        none  # noqa: E501

        :param caption: The caption of this Event.
        :type caption: str
        """

        self._caption = caption

    @property
    def verbosity(self):
        """Gets the verbosity of this Event.

        none  # noqa: E501

        :return: The verbosity of this Event.
        :rtype: str
        """
        return self._verbosity

    @verbosity.setter
    def verbosity(self, verbosity):
        """Sets the verbosity of this Event.

        none  # noqa: E501

        :param verbosity: The verbosity of this Event.
        :type verbosity: str
        """

        self._verbosity = verbosity

    @property
    def silient(self):
        """Gets the silient of this Event.

        none  # noqa: E501

        :return: The silient of this Event.
        :rtype: bool
        """
        return self._silient

    @silient.setter
    def silient(self, silient):
        """Sets the silient of this Event.

        none  # noqa: E501

        :param silient: The silient of this Event.
        :type silient: bool
        """

        self._silient = silient
