# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class LoginPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, success=None, token=None, refresh_token=None, refresh_token_expiration=None, permissions=None):  # noqa: E501
        """LoginPermissions - a model defined in OpenAPI

        :param username: The username of this LoginPermissions.  # noqa: E501
        :type username: str
        :param success: The success of this LoginPermissions.  # noqa: E501
        :type success: bool
        :param token: The token of this LoginPermissions.  # noqa: E501
        :type token: str
        :param refresh_token: The refresh_token of this LoginPermissions.  # noqa: E501
        :type refresh_token: str
        :param refresh_token_expiration: The refresh_token_expiration of this LoginPermissions.  # noqa: E501
        :type refresh_token_expiration: str
        :param permissions: The permissions of this LoginPermissions.  # noqa: E501
        :type permissions: List[Dict[str, object]]
        """
        self.openapi_types = {
            'username': str,
            'success': bool,
            'token': str,
            'refresh_token': str,
            'refresh_token_expiration': str,
            'permissions': List[Dict[str, object]]
        }

        self.attribute_map = {
            'username': 'username',
            'success': 'success',
            'token': 'token',
            'refresh_token': 'refreshToken',
            'refresh_token_expiration': 'refreshTokenExpiration',
            'permissions': 'permissions'
        }

        self._username = username
        self._success = success
        self._token = token
        self._refresh_token = refresh_token
        self._refresh_token_expiration = refresh_token_expiration
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt) -> 'LoginPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoginPermissions of this LoginPermissions.  # noqa: E501
        :rtype: LoginPermissions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this LoginPermissions.


        :return: The username of this LoginPermissions.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LoginPermissions.


        :param username: The username of this LoginPermissions.
        :type username: str
        """
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def success(self):
        """Gets the success of this LoginPermissions.


        :return: The success of this LoginPermissions.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this LoginPermissions.


        :param success: The success of this LoginPermissions.
        :type success: bool
        """

        self._success = success

    @property
    def token(self):
        """Gets the token of this LoginPermissions.


        :return: The token of this LoginPermissions.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LoginPermissions.


        :param token: The token of this LoginPermissions.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501
        if token is not None and len(token) < 1:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `1`")  # noqa: E501

        self._token = token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this LoginPermissions.


        :return: The refresh_token of this LoginPermissions.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this LoginPermissions.


        :param refresh_token: The refresh_token of this LoginPermissions.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501
        if refresh_token is not None and len(refresh_token) < 1:
            raise ValueError("Invalid value for `refresh_token`, length must be greater than or equal to `1`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def refresh_token_expiration(self):
        """Gets the refresh_token_expiration of this LoginPermissions.


        :return: The refresh_token_expiration of this LoginPermissions.
        :rtype: str
        """
        return self._refresh_token_expiration

    @refresh_token_expiration.setter
    def refresh_token_expiration(self, refresh_token_expiration):
        """Sets the refresh_token_expiration of this LoginPermissions.


        :param refresh_token_expiration: The refresh_token_expiration of this LoginPermissions.
        :type refresh_token_expiration: str
        """
        if refresh_token_expiration is None:
            raise ValueError("Invalid value for `refresh_token_expiration`, must not be `None`")  # noqa: E501
        if refresh_token_expiration is not None and len(refresh_token_expiration) < 1:
            raise ValueError("Invalid value for `refresh_token_expiration`, length must be greater than or equal to `1`")  # noqa: E501

        self._refresh_token_expiration = refresh_token_expiration

    @property
    def permissions(self):
        """Gets the permissions of this LoginPermissions.


        :return: The permissions of this LoginPermissions.
        :rtype: List[Dict[str, object]]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this LoginPermissions.


        :param permissions: The permissions of this LoginPermissions.
        :type permissions: List[Dict[str, object]]
        """

        self._permissions = permissions
