// tslint:disable
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    Method,
    MethodFromJSON,
    MethodToJSON,
} from '../models';

export interface CreateMethodRequest {
    pipelineId: number;
    method?: Method;
}

export interface ListMethodsRequest {
    pipelineId: number;
}


/**
 * Creates a  method
 * Creates method
 */
function createMethodRaw<T>(requestParameters: CreateMethodRequest, requestConfig: runtime.TypedQueryConfig<T, Information> = {}): QueryConfig<T> {
    if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
        throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling createMethod.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pipeline/{pipelineId}/method`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || MethodToJSON(requestParameters.method),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(InformationFromJSON(body), text);
    }

    return config;
}

/**
* Creates a  method
* Creates method
*/
export function createMethod<T>(requestParameters: CreateMethodRequest, requestConfig?: runtime.TypedQueryConfig<T, Information>): QueryConfig<T> {
    return createMethodRaw(requestParameters, requestConfig);
}

/**
 * List all methods
 * List pipelnie methods
 */
function listMethodsRaw<T>(requestParameters: ListMethodsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Method>> = {}): QueryConfig<T> {
    if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
        throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling listMethods.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pipeline/{pipelineId}/method`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(MethodFromJSON), text);
    }

    return config;
}

/**
* List all methods
* List pipelnie methods
*/
export function listMethods<T>(requestParameters: ListMethodsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Method>>): QueryConfig<T> {
    return listMethodsRaw(requestParameters, requestConfig);
}

