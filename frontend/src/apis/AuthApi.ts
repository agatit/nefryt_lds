// tslint:disable
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Login,
    LoginFromJSON,
    LoginToJSON,
    LoginPermissions,
    LoginPermissionsFromJSON,
    LoginPermissionsToJSON,
} from '../models';

export interface AuthLoginRequest {
    login?: Login;
}


/**
 * Authentication Login
 */
function authLoginRaw<T>(requestParameters: AuthLoginRequest, requestConfig: runtime.TypedQueryConfig<T, LoginPermissions> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/auth/login`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || LoginToJSON(requestParameters.login),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LoginPermissionsFromJSON(body), text);
    }

    return config;
}

/**
* Authentication Login
*/
export function authLogin<T>(requestParameters: AuthLoginRequest, requestConfig?: runtime.TypedQueryConfig<T, LoginPermissions>): QueryConfig<T> {
    return authLoginRaw(requestParameters, requestConfig);
}

/**
 * Authentication token refresh
 */
function authRefreshRaw<T>( requestConfig: runtime.TypedQueryConfig<T, LoginPermissions> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/auth/refresh`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LoginPermissionsFromJSON(body), text);
    }

    return config;
}

/**
* Authentication token refresh
*/
export function authRefresh<T>( requestConfig?: runtime.TypedQueryConfig<T, LoginPermissions>): QueryConfig<T> {
    return authRefreshRaw( requestConfig);
}

