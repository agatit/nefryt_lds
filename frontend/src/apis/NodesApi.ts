// tslint:disable
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    Node,
    NodeFromJSON,
    NodeToJSON,
} from '../models';

export interface CreateNodeRequest {
    node?: Node;
}

export interface DeleteNodeByIdRequest {
    nodeId: number;
}

export interface GetNodeByIdRequest {
    nodeId: number;
}

export interface UpdateNodeRequest {
    nodeId: number;
    node?: Node;
}


/**
 * Create a nodes
 * Create nodes
 */
function createNodeRaw<T>(requestParameters: CreateNodeRequest, requestConfig: runtime.TypedQueryConfig<T, Node> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/node`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || NodeToJSON(requestParameters.node),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NodeFromJSON(body), text);
    }

    return config;
}

/**
* Create a nodes
* Create nodes
*/
export function createNode<T>(requestParameters: CreateNodeRequest, requestConfig?: runtime.TypedQueryConfig<T, Node>): QueryConfig<T> {
    return createNodeRaw(requestParameters, requestConfig);
}

/**
 * Deletes specific node
 * Deletes node
 */
function deleteNodeByIdRaw<T>(requestParameters: DeleteNodeByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Information> = {}): QueryConfig<T> {
    if (requestParameters.nodeId === null || requestParameters.nodeId === undefined) {
        throw new runtime.RequiredError('nodeId','Required parameter requestParameters.nodeId was null or undefined when calling deleteNodeById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/node/{nodeId}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters.nodeId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(InformationFromJSON(body), text);
    }

    return config;
}

/**
* Deletes specific node
* Deletes node
*/
export function deleteNodeById<T>(requestParameters: DeleteNodeByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Information>): QueryConfig<T> {
    return deleteNodeByIdRaw(requestParameters, requestConfig);
}

/**
 * Info for specific node
 * Gets node details
 */
function getNodeByIdRaw<T>(requestParameters: GetNodeByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Node> = {}): QueryConfig<T> {
    if (requestParameters.nodeId === null || requestParameters.nodeId === undefined) {
        throw new runtime.RequiredError('nodeId','Required parameter requestParameters.nodeId was null or undefined when calling getNodeById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/node/{nodeId}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters.nodeId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NodeFromJSON(body), text);
    }

    return config;
}

/**
* Info for specific node
* Gets node details
*/
export function getNodeById<T>(requestParameters: GetNodeByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Node>): QueryConfig<T> {
    return getNodeByIdRaw(requestParameters, requestConfig);
}

/**
 * List all nodes
 * List nodes
 */
function listNodesRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Node>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/node`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(NodeFromJSON), text);
    }

    return config;
}

/**
* List all nodes
* List nodes
*/
export function listNodes<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Node>>): QueryConfig<T> {
    return listNodesRaw( requestConfig);
}

/**
 * Updates a nodes
 * Updates nodes
 */
function updateNodeRaw<T>(requestParameters: UpdateNodeRequest, requestConfig: runtime.TypedQueryConfig<T, Node> = {}): QueryConfig<T> {
    if (requestParameters.nodeId === null || requestParameters.nodeId === undefined) {
        throw new runtime.RequiredError('nodeId','Required parameter requestParameters.nodeId was null or undefined when calling updateNode.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/node/{nodeId}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters.nodeId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || NodeToJSON(requestParameters.node),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(NodeFromJSON(body), text);
    }

    return config;
}

/**
* Updates a nodes
* Updates nodes
*/
export function updateNode<T>(requestParameters: UpdateNodeRequest, requestConfig?: runtime.TypedQueryConfig<T, Node>): QueryConfig<T> {
    return updateNodeRaw(requestParameters, requestConfig);
}

