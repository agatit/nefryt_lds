// tslint:disable
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Event,
    EventFromJSON,
    EventToJSON,
    Information,
    InformationFromJSON,
    InformationToJSON,
} from '../models';

export interface AckEventRequest {
    eventId: number;
}

export interface GetEventByIdRequest {
    eventId: number;
}


/**
 * Acknowledges an event
 * Acknowledges ack
 */
function ackEventRaw<T>(requestParameters: AckEventRequest, requestConfig: runtime.TypedQueryConfig<T, Information> = {}): QueryConfig<T> {
    if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
        throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling ackEvent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/event/{eventId}/ack`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(InformationFromJSON(body), text);
    }

    return config;
}

/**
* Acknowledges an event
* Acknowledges ack
*/
export function ackEvent<T>(requestParameters: AckEventRequest, requestConfig?: runtime.TypedQueryConfig<T, Information>): QueryConfig<T> {
    return ackEventRaw(requestParameters, requestConfig);
}

/**
 * Info for specific event
 * Gets detailed event
 */
function getEventByIdRaw<T>(requestParameters: GetEventByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Event> = {}): QueryConfig<T> {
    if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
        throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/event/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventFromJSON(body), text);
    }

    return config;
}

/**
* Info for specific event
* Gets detailed event
*/
export function getEventById<T>(requestParameters: GetEventByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Event>): QueryConfig<T> {
    return getEventByIdRaw(requestParameters, requestConfig);
}

/**
 * List all events
 * List events
 */
function listEventsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Event>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/event`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(EventFromJSON), text);
    }

    return config;
}

/**
* List all events
* List events
*/
export function listEvents<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Event>>): QueryConfig<T> {
    return listEventsRaw( requestConfig);
}

