// tslint:disable
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    Link,
    LinkFromJSON,
    LinkToJSON,
} from '../models';

export interface CreateLinkRequest {
    link?: Link;
}

export interface GetLinkByIdRequest {
    linkId: number;
}

export interface UpdateLinkRequest {
    link?: Link;
}


/**
 * Create a links
 * Create links
 */
function createLinkRaw<T>(requestParameters: CreateLinkRequest, requestConfig: runtime.TypedQueryConfig<T, Link> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/link`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || LinkToJSON(requestParameters.link),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LinkFromJSON(body), text);
    }

    return config;
}

/**
* Create a links
* Create links
*/
export function createLink<T>(requestParameters: CreateLinkRequest, requestConfig?: runtime.TypedQueryConfig<T, Link>): QueryConfig<T> {
    return createLinkRaw(requestParameters, requestConfig);
}

/**
 * Deletes specific link
 * Deletes link
 */
function deleteLinkByIdRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Information> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/link/{linkId}`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(InformationFromJSON(body), text);
    }

    return config;
}

/**
* Deletes specific link
* Deletes link
*/
export function deleteLinkById<T>( requestConfig?: runtime.TypedQueryConfig<T, Information>): QueryConfig<T> {
    return deleteLinkByIdRaw( requestConfig);
}

/**
 * Info for specific link
 * Gets link details
 */
function getLinkByIdRaw<T>(requestParameters: GetLinkByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Link> = {}): QueryConfig<T> {
    if (requestParameters.linkId === null || requestParameters.linkId === undefined) {
        throw new runtime.RequiredError('linkId','Required parameter requestParameters.linkId was null or undefined when calling getLinkById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/link/{linkId}`.replace(`{${"linkId"}}`, encodeURIComponent(String(requestParameters.linkId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LinkFromJSON(body), text);
    }

    return config;
}

/**
* Info for specific link
* Gets link details
*/
export function getLinkById<T>(requestParameters: GetLinkByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Link>): QueryConfig<T> {
    return getLinkByIdRaw(requestParameters, requestConfig);
}

/**
 * List all links
 * List links
 */
function listLinksRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Link>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/link`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(LinkFromJSON), text);
    }

    return config;
}

/**
* List all links
* List links
*/
export function listLinks<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Link>>): QueryConfig<T> {
    return listLinksRaw( requestConfig);
}

/**
 * Updates a links
 * Updates links
 */
function updateLinkRaw<T>(requestParameters: UpdateLinkRequest, requestConfig: runtime.TypedQueryConfig<T, Link> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/link/{linkId}`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || LinkToJSON(requestParameters.link),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LinkFromJSON(body), text);
    }

    return config;
}

/**
* Updates a links
* Updates links
*/
export function updateLink<T>(requestParameters: UpdateLinkRequest, requestConfig?: runtime.TypedQueryConfig<T, Link>): QueryConfig<T> {
    return updateLinkRaw(requestParameters, requestConfig);
}

