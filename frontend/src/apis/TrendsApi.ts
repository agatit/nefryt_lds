// tslint:disable
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    Trend,
    TrendFromJSON,
    TrendToJSON,
    TrendData,
    TrendDataFromJSON,
    TrendDataToJSON,
    TrendDef,
    TrendDefFromJSON,
    TrendDefToJSON,
    TrendParam,
    TrendParamFromJSON,
    TrendParamToJSON,
} from '../models';

export interface CreateTrendRequest {
    trend?: Trend;
}

export interface DeleteTrendByIdRequest {
    trendId: number;
}

export interface GetTrendByIdRequest {
    trendId: number;
}

export interface GetTrendCurrentDataRequest {
    trendIdList: Array<number>;
    period: number;
    samples: number;
}

export interface GetTrendDataRequest {
    trendIdList: Array<number>;
    begin: number;
    end: number;
    samples: number;
}

export interface GetTrendParamByIdRequest {
    trendId: number;
    trendParamDefId: string;
}

export interface ListTrendParamsRequest {
    trendId: number;
}

export interface UpdateTrendRequest {
    trendId: number;
    trend?: Trend;
}

export interface UpdateTrendParamRequest {
    trendId: number;
    trendParamDefId: string;
    trendParam?: TrendParam;
}


/**
 * Create a trend
 * Create trend
 */
function createTrendRaw<T>(requestParameters: CreateTrendRequest, requestConfig: runtime.TypedQueryConfig<T, Trend> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TrendToJSON(requestParameters.trend),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrendFromJSON(body), text);
    }

    return config;
}

/**
* Create a trend
* Create trend
*/
export function createTrend<T>(requestParameters: CreateTrendRequest, requestConfig?: runtime.TypedQueryConfig<T, Trend>): QueryConfig<T> {
    return createTrendRaw(requestParameters, requestConfig);
}

/**
 * Deletes specific trend
 * Deletes trend
 */
function deleteTrendByIdRaw<T>(requestParameters: DeleteTrendByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Information> = {}): QueryConfig<T> {
    if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
        throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling deleteTrendById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(InformationFromJSON(body), text);
    }

    return config;
}

/**
* Deletes specific trend
* Deletes trend
*/
export function deleteTrendById<T>(requestParameters: DeleteTrendByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Information>): QueryConfig<T> {
    return deleteTrendByIdRaw(requestParameters, requestConfig);
}

/**
 * Info for specific trend
 * Detail trend
 */
function getTrendByIdRaw<T>(requestParameters: GetTrendByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Trend> = {}): QueryConfig<T> {
    if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
        throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling getTrendById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrendFromJSON(body), text);
    }

    return config;
}

/**
* Info for specific trend
* Detail trend
*/
export function getTrendById<T>(requestParameters: GetTrendByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Trend>): QueryConfig<T> {
    return getTrendByIdRaw(requestParameters, requestConfig);
}

/**
 * List trend currnet data
 * List trend currnet data
 */
function getTrendCurrentDataRaw<T>(requestParameters: GetTrendCurrentDataRequest, requestConfig: runtime.TypedQueryConfig<T, Array<TrendData>> = {}): QueryConfig<T> {
    if (requestParameters.trendIdList === null || requestParameters.trendIdList === undefined) {
        throw new runtime.RequiredError('trendIdList','Required parameter requestParameters.trendIdList was null or undefined when calling getTrendCurrentData.');
    }

    if (requestParameters.period === null || requestParameters.period === undefined) {
        throw new runtime.RequiredError('period','Required parameter requestParameters.period was null or undefined when calling getTrendCurrentData.');
    }

    if (requestParameters.samples === null || requestParameters.samples === undefined) {
        throw new runtime.RequiredError('samples','Required parameter requestParameters.samples was null or undefined when calling getTrendCurrentData.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendIdList}/current_data/{period}/{samples}`.replace(`{${"trendIdList"}}`, encodeURIComponent(String(requestParameters.trendIdList))).replace(`{${"period"}}`, encodeURIComponent(String(requestParameters.period))).replace(`{${"samples"}}`, encodeURIComponent(String(requestParameters.samples))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrendDataFromJSON), text);
    }

    return config;
}

/**
* List trend currnet data
* List trend currnet data
*/
export function getTrendCurrentData<T>(requestParameters: GetTrendCurrentDataRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<TrendData>>): QueryConfig<T> {
    return getTrendCurrentDataRaw(requestParameters, requestConfig);
}

/**
 * List data
 * List trend data
 */
function getTrendDataRaw<T>(requestParameters: GetTrendDataRequest, requestConfig: runtime.TypedQueryConfig<T, Array<TrendData>> = {}): QueryConfig<T> {
    if (requestParameters.trendIdList === null || requestParameters.trendIdList === undefined) {
        throw new runtime.RequiredError('trendIdList','Required parameter requestParameters.trendIdList was null or undefined when calling getTrendData.');
    }

    if (requestParameters.begin === null || requestParameters.begin === undefined) {
        throw new runtime.RequiredError('begin','Required parameter requestParameters.begin was null or undefined when calling getTrendData.');
    }

    if (requestParameters.end === null || requestParameters.end === undefined) {
        throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling getTrendData.');
    }

    if (requestParameters.samples === null || requestParameters.samples === undefined) {
        throw new runtime.RequiredError('samples','Required parameter requestParameters.samples was null or undefined when calling getTrendData.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendIdList}/data/{begin}/{end}/{samples}`.replace(`{${"trendIdList"}}`, encodeURIComponent(String(requestParameters.trendIdList))).replace(`{${"begin"}}`, encodeURIComponent(String(requestParameters.begin))).replace(`{${"end"}}`, encodeURIComponent(String(requestParameters.end))).replace(`{${"samples"}}`, encodeURIComponent(String(requestParameters.samples))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrendDataFromJSON), text);
    }

    return config;
}

/**
* List data
* List trend data
*/
export function getTrendData<T>(requestParameters: GetTrendDataRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<TrendData>>): QueryConfig<T> {
    return getTrendDataRaw(requestParameters, requestConfig);
}

/**
 * Info for specific trend param
 * Gets trend param detail
 */
function getTrendParamByIdRaw<T>(requestParameters: GetTrendParamByIdRequest, requestConfig: runtime.TypedQueryConfig<T, TrendParam> = {}): QueryConfig<T> {
    if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
        throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling getTrendParamById.');
    }

    if (requestParameters.trendParamDefId === null || requestParameters.trendParamDefId === undefined) {
        throw new runtime.RequiredError('trendParamDefId','Required parameter requestParameters.trendParamDefId was null or undefined when calling getTrendParamById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendId}/param/{trendParamDefId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))).replace(`{${"trendParamDefId"}}`, encodeURIComponent(String(requestParameters.trendParamDefId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrendParamFromJSON(body), text);
    }

    return config;
}

/**
* Info for specific trend param
* Gets trend param detail
*/
export function getTrendParamById<T>(requestParameters: GetTrendParamByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, TrendParam>): QueryConfig<T> {
    return getTrendParamByIdRaw(requestParameters, requestConfig);
}

/**
 * List all trend defs
 * List trend defs
 */
function listTrendDefsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<TrendDef>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend_def`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrendDefFromJSON), text);
    }

    return config;
}

/**
* List all trend defs
* List trend defs
*/
export function listTrendDefs<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<TrendDef>>): QueryConfig<T> {
    return listTrendDefsRaw( requestConfig);
}

/**
 * List all trend params
 * List trend params
 */
function listTrendParamsRaw<T>(requestParameters: ListTrendParamsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<TrendParam>> = {}): QueryConfig<T> {
    if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
        throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling listTrendParams.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendId}/param`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrendParamFromJSON), text);
    }

    return config;
}

/**
* List all trend params
* List trend params
*/
export function listTrendParams<T>(requestParameters: ListTrendParamsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<TrendParam>>): QueryConfig<T> {
    return listTrendParamsRaw(requestParameters, requestConfig);
}

/**
 * List all trends
 * List trends
 */
function listTrendsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Trend>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrendFromJSON), text);
    }

    return config;
}

/**
* List all trends
* List trends
*/
export function listTrends<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Trend>>): QueryConfig<T> {
    return listTrendsRaw( requestConfig);
}

/**
 * Update a trend
 * Update trend
 */
function updateTrendRaw<T>(requestParameters: UpdateTrendRequest, requestConfig: runtime.TypedQueryConfig<T, Trend> = {}): QueryConfig<T> {
    if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
        throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling updateTrend.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || TrendToJSON(requestParameters.trend),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrendFromJSON(body), text);
    }

    return config;
}

/**
* Update a trend
* Update trend
*/
export function updateTrend<T>(requestParameters: UpdateTrendRequest, requestConfig?: runtime.TypedQueryConfig<T, Trend>): QueryConfig<T> {
    return updateTrendRaw(requestParameters, requestConfig);
}

/**
 * Updates trend param
 * Update trend params
 */
function updateTrendParamRaw<T>(requestParameters: UpdateTrendParamRequest, requestConfig: runtime.TypedQueryConfig<T, TrendParam> = {}): QueryConfig<T> {
    if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
        throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling updateTrendParam.');
    }

    if (requestParameters.trendParamDefId === null || requestParameters.trendParamDefId === undefined) {
        throw new runtime.RequiredError('trendParamDefId','Required parameter requestParameters.trendParamDefId was null or undefined when calling updateTrendParam.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/trend/{trendId}/param/{trendParamDefId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))).replace(`{${"trendParamDefId"}}`, encodeURIComponent(String(requestParameters.trendParamDefId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || TrendParamToJSON(requestParameters.trendParam),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrendParamFromJSON(body), text);
    }

    return config;
}

/**
* Updates trend param
* Update trend params
*/
export function updateTrendParam<T>(requestParameters: UpdateTrendParamRequest, requestConfig?: runtime.TypedQueryConfig<T, TrendParam>): QueryConfig<T> {
    return updateTrendParamRaw(requestParameters, requestConfig);
}

