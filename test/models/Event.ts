/* tslint:disable */
/* eslint-disable */
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * none
     * @type {number}
     * @memberof Event
     */
    readonly iD: number;
    /**
     * none
     * @type {number}
     * @memberof Event
     */
    eventDefID: number;
    /**
     * none
     * @type {number}
     * @memberof Event
     */
    methodID: number;
    /**
     * none
     * @type {Date}
     * @memberof Event
     */
    beginDate: Date;
    /**
     * none
     * @type {Date}
     * @memberof Event
     */
    ackDate?: Date;
    /**
     * none
     * @type {Date}
     * @memberof Event
     */
    endDate?: Date;
    /**
     * none
     * @type {string}
     * @memberof Event
     */
    details?: string;
    /**
     * none
     * @type {number}
     * @memberof Event
     */
    position?: number;
    /**
     * none
     * @type {string}
     * @memberof Event
     */
    caption?: string;
    /**
     * none
     * @type {string}
     * @memberof Event
     */
    verbosity?: string;
    /**
     * none
     * @type {boolean}
     * @memberof Event
     */
    silient?: boolean;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'iD': json['ID'],
        'eventDefID': json['EventDefID'],
        'methodID': json['MethodID'],
        'beginDate': (new Date(json['BeginDate'])),
        'ackDate': !exists(json, 'AckDate') ? undefined : (new Date(json['AckDate'])),
        'endDate': !exists(json, 'EndDate') ? undefined : (new Date(json['EndDate'])),
        'details': !exists(json, 'Details') ? undefined : json['Details'],
        'position': !exists(json, 'Position') ? undefined : json['Position'],
        'caption': !exists(json, 'Caption') ? undefined : json['Caption'],
        'verbosity': !exists(json, 'Verbosity') ? undefined : json['Verbosity'],
        'silient': !exists(json, 'Silient') ? undefined : json['Silient'],
    };
}

export function EventToJSON(value?: Event | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'EventDefID': value.eventDefID,
        'MethodID': value.methodID,
        'BeginDate': (value.beginDate.toISOString()),
        'AckDate': value.ackDate === undefined ? undefined : (value.ackDate.toISOString()),
        'EndDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'Details': value.details,
        'Position': value.position,
        'Caption': value.caption,
        'Verbosity': value.verbosity,
        'Silient': value.silient,
    };
}

