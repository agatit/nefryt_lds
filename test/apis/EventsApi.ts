/* tslint:disable */
/* eslint-disable */
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Event,
    EventFromJSON,
    EventToJSON,
    Information,
    InformationFromJSON,
    InformationToJSON,
} from '../models';

export interface AckEventRequest {
    eventId: number;
}

export interface GetEventByIdRequest {
    eventId: number;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Acknowledges an event
     * Acknowledges ack
     */
    async ackEventRaw(requestParameters: AckEventRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Information>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling ackEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/{eventId}/ack`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InformationFromJSON(jsonValue));
    }

    /**
     * Acknowledges an event
     * Acknowledges ack
     */
    async ackEvent(requestParameters: AckEventRequest, initOverrides?: RequestInit): Promise<Information> {
        const response = await this.ackEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for specific event
     * Gets detailed event
     */
    async getEventByIdRaw(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Info for specific event
     * Gets detailed event
     */
    async getEventById(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit): Promise<Event> {
        const response = await this.getEventByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all events
     * List events
     */
    async listEventsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * List all events
     * List events
     */
    async listEvents(initOverrides?: RequestInit): Promise<Array<Event>> {
        const response = await this.listEventsRaw(initOverrides);
        return await response.value();
    }

}
