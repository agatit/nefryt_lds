/* tslint:disable */
/* eslint-disable */
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    Pipeline,
    PipelineFromJSON,
    PipelineToJSON,
} from '../models';

export interface CreatePipelineRequest {
    pipeline?: Pipeline;
}

export interface GetPipelineByIdRequest {
    pipelineId: number;
}

export interface UpdatePipelineRequest {
    pipelineId: number;
    pipeline?: Pipeline;
}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI {

    /**
     * Create a pipeline
     * Create pipeline
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Pipeline>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pipeline`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineToJSON(requestParameters.pipeline),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * Create a pipeline
     * Create pipeline
     */
    async createPipeline(requestParameters: CreatePipelineRequest = {}, initOverrides?: RequestInit): Promise<Pipeline> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes specific pipeline
     * Deletes pipeline
     */
    async deletePipelineByIdRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Information>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipeline/{pipelineId}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InformationFromJSON(jsonValue));
    }

    /**
     * Deletes specific pipeline
     * Deletes pipeline
     */
    async deletePipelineById(initOverrides?: RequestInit): Promise<Information> {
        const response = await this.deletePipelineByIdRaw(initOverrides);
        return await response.value();
    }

    /**
     * Info for specific pipeline
     * Gets pipeline details
     */
    async getPipelineByIdRaw(requestParameters: GetPipelineByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getPipelineById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipeline/{pipelineId}`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * Info for specific pipeline
     * Gets pipeline details
     */
    async getPipelineById(requestParameters: GetPipelineByIdRequest, initOverrides?: RequestInit): Promise<Pipeline> {
        const response = await this.getPipelineByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all pipelines
     * List pipelines
     */
    async listPipelinesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Pipeline>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipeline`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineFromJSON));
    }

    /**
     * List all pipelines
     * List pipelines
     */
    async listPipelines(initOverrides?: RequestInit): Promise<Array<Pipeline>> {
        const response = await this.listPipelinesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates pipeline
     * Updates pipeline
     */
    async updatePipelineRaw(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling updatePipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pipeline/{pipelineId}`.replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineToJSON(requestParameters.pipeline),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * Updates pipeline
     * Updates pipeline
     */
    async updatePipeline(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit): Promise<Pipeline> {
        const response = await this.updatePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
