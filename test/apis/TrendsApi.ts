/* tslint:disable */
/* eslint-disable */
/**
 * Nefryt LDS API
 * Database API for Nefryt LDS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    Trend,
    TrendFromJSON,
    TrendToJSON,
    TrendData,
    TrendDataFromJSON,
    TrendDataToJSON,
    TrendDef,
    TrendDefFromJSON,
    TrendDefToJSON,
    TrendParam,
    TrendParamFromJSON,
    TrendParamToJSON,
} from '../models';

export interface CreateTrendRequest {
    trend?: Trend;
}

export interface DeleteTrendByIdRequest {
    trendId: number;
}

export interface GetTrendByIdRequest {
    trendId: number;
}

export interface GetTrendDataRequest {
    trendIdList: Array<number>;
    begin: number;
    end: number;
    samples: number;
}

export interface GetTrendParamByIdRequest {
    trendId: number;
    trendParamDefId: string;
}

export interface ListTrendParamsRequest {
    trendId: number;
}

export interface UpdateTrendRequest {
    trendId: number;
    trend?: Trend;
}

export interface UpdateTrendParamRequest {
    trendId: number;
    trendParamDefId: string;
    trendParam?: TrendParam;
}

/**
 * 
 */
export class TrendsApi extends runtime.BaseAPI {

    /**
     * Create a trend
     * Create trend
     */
    async createTrendRaw(requestParameters: CreateTrendRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Trend>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/trend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrendToJSON(requestParameters.trend),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendFromJSON(jsonValue));
    }

    /**
     * Create a trend
     * Create trend
     */
    async createTrend(requestParameters: CreateTrendRequest = {}, initOverrides?: RequestInit): Promise<Trend> {
        const response = await this.createTrendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes specific trend
     * Deletes trend
     */
    async deleteTrendByIdRaw(requestParameters: DeleteTrendByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Information>> {
        if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
            throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling deleteTrendById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend/{trendId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InformationFromJSON(jsonValue));
    }

    /**
     * Deletes specific trend
     * Deletes trend
     */
    async deleteTrendById(requestParameters: DeleteTrendByIdRequest, initOverrides?: RequestInit): Promise<Information> {
        const response = await this.deleteTrendByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for specific trend
     * Detail trend
     */
    async getTrendByIdRaw(requestParameters: GetTrendByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Trend>> {
        if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
            throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling getTrendById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend/{trendId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendFromJSON(jsonValue));
    }

    /**
     * Info for specific trend
     * Detail trend
     */
    async getTrendById(requestParameters: GetTrendByIdRequest, initOverrides?: RequestInit): Promise<Trend> {
        const response = await this.getTrendByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List data
     * List trend data
     */
    async getTrendDataRaw(requestParameters: GetTrendDataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TrendData>>> {
        if (requestParameters.trendIdList === null || requestParameters.trendIdList === undefined) {
            throw new runtime.RequiredError('trendIdList','Required parameter requestParameters.trendIdList was null or undefined when calling getTrendData.');
        }

        if (requestParameters.begin === null || requestParameters.begin === undefined) {
            throw new runtime.RequiredError('begin','Required parameter requestParameters.begin was null or undefined when calling getTrendData.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling getTrendData.');
        }

        if (requestParameters.samples === null || requestParameters.samples === undefined) {
            throw new runtime.RequiredError('samples','Required parameter requestParameters.samples was null or undefined when calling getTrendData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend/{trendIdList}/data/{begin}/{end}/{samples}`.replace(`{${"trendIdList"}}`, encodeURIComponent(String(requestParameters.trendIdList))).replace(`{${"begin"}}`, encodeURIComponent(String(requestParameters.begin))).replace(`{${"end"}}`, encodeURIComponent(String(requestParameters.end))).replace(`{${"samples"}}`, encodeURIComponent(String(requestParameters.samples))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrendDataFromJSON));
    }

    /**
     * List data
     * List trend data
     */
    async getTrendData(requestParameters: GetTrendDataRequest, initOverrides?: RequestInit): Promise<Array<TrendData>> {
        const response = await this.getTrendDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for specific trend param
     * Gets trend param detail
     */
    async getTrendParamByIdRaw(requestParameters: GetTrendParamByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TrendParam>> {
        if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
            throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling getTrendParamById.');
        }

        if (requestParameters.trendParamDefId === null || requestParameters.trendParamDefId === undefined) {
            throw new runtime.RequiredError('trendParamDefId','Required parameter requestParameters.trendParamDefId was null or undefined when calling getTrendParamById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend/{trendId}/param/{trendParamDefId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))).replace(`{${"trendParamDefId"}}`, encodeURIComponent(String(requestParameters.trendParamDefId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendParamFromJSON(jsonValue));
    }

    /**
     * Info for specific trend param
     * Gets trend param detail
     */
    async getTrendParamById(requestParameters: GetTrendParamByIdRequest, initOverrides?: RequestInit): Promise<TrendParam> {
        const response = await this.getTrendParamByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all trend defs
     * List trend defs
     */
    async listTrendDefsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TrendDef>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend_def`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrendDefFromJSON));
    }

    /**
     * List all trend defs
     * List trend defs
     */
    async listTrendDefs(initOverrides?: RequestInit): Promise<Array<TrendDef>> {
        const response = await this.listTrendDefsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all trend params
     * List trend params
     */
    async listTrendParamsRaw(requestParameters: ListTrendParamsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TrendParam>>> {
        if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
            throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling listTrendParams.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend/{trendId}/param`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrendParamFromJSON));
    }

    /**
     * List all trend params
     * List trend params
     */
    async listTrendParams(requestParameters: ListTrendParamsRequest, initOverrides?: RequestInit): Promise<Array<TrendParam>> {
        const response = await this.listTrendParamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all trends
     * List trends
     */
    async listTrendsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Trend>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrendFromJSON));
    }

    /**
     * List all trends
     * List trends
     */
    async listTrends(initOverrides?: RequestInit): Promise<Array<Trend>> {
        const response = await this.listTrendsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a trend
     * Update trend
     */
    async updateTrendRaw(requestParameters: UpdateTrendRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Trend>> {
        if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
            throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling updateTrend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/trend/{trendId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrendToJSON(requestParameters.trend),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendFromJSON(jsonValue));
    }

    /**
     * Update a trend
     * Update trend
     */
    async updateTrend(requestParameters: UpdateTrendRequest, initOverrides?: RequestInit): Promise<Trend> {
        const response = await this.updateTrendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates trend param
     * Update trend params
     */
    async updateTrendParamRaw(requestParameters: UpdateTrendParamRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TrendParam>> {
        if (requestParameters.trendId === null || requestParameters.trendId === undefined) {
            throw new runtime.RequiredError('trendId','Required parameter requestParameters.trendId was null or undefined when calling updateTrendParam.');
        }

        if (requestParameters.trendParamDefId === null || requestParameters.trendParamDefId === undefined) {
            throw new runtime.RequiredError('trendParamDefId','Required parameter requestParameters.trendParamDefId was null or undefined when calling updateTrendParam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/trend/{trendId}/param/{trendParamDefId}`.replace(`{${"trendId"}}`, encodeURIComponent(String(requestParameters.trendId))).replace(`{${"trendParamDefId"}}`, encodeURIComponent(String(requestParameters.trendParamDefId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrendParamToJSON(requestParameters.trendParam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendParamFromJSON(jsonValue));
    }

    /**
     * Updates trend param
     * Update trend params
     */
    async updateTrendParam(requestParameters: UpdateTrendParamRequest, initOverrides?: RequestInit): Promise<TrendParam> {
        const response = await this.updateTrendParamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
